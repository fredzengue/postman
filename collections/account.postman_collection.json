{
	"info": {
		"_postman_id": "f4db4765-d6a2-47c1-954a-44735fa9d44a",
		"name": "account",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "16478026"
	},
	"item": [
		{
			"name": "login with username and password correct Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let res = null\r",
							"if(pm.response.code !== 500){\r",
							" res = pm.response.json()\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"response body should be conform\", ()=>{\r",
							"    pm.expect(res).to.be.have.property(\"refresh\")\r",
							"    pm.expect(res).to.be.have.property(\"access\")\r",
							"})\r",
							"pm.collectionVariables.set(\"TOKEN\", res.access)\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"johndoe\",\r\n    \"password\": \"azerty\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{URL}}/login/"
			},
			"response": []
		},
		{
			"name": "details with authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - username, email, job, and about_me\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData).to.have.property('username');",
							"  pm.expect(responseData).to.have.property('email');",
							"  pm.expect(responseData).to.have.property('job');",
							"  pm.expect(responseData).to.have.property('about_me');",
							"});",
							"",
							"",
							"pm.test(\"Username is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.username).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Username should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": {
						"token": "{{TOKEN}}"
					}
				},
				"method": "GET",
				"header": [],
				"url": "{{URL}}/me/"
			},
			"response": []
		},
		{
			"name": "details without authorization",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 401\", function () {",
							"    pm.expect(pm.response.code).to.equal(401);",
							"});",
							"",
							"",
							"pm.test(\"Content-Type header is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field 'detail'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.have.property('detail');",
							"});",
							"",
							"",
							"pm.test(\"Detail field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.detail).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{URL}}/me/"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": "token",
			"type": "string"
		}
	]
}